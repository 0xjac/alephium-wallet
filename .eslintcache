[{"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/index.tsx":"1","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/serviceWorker.js":"2","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/App.tsx":"3","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/globalStyles.ts":"4","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/themes.ts":"5","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/InfoBox.tsx":"6","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Inputs.tsx":"7","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Buttons.tsx":"8","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Paragraph.tsx":"9","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/index.tsx":"10","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/PageComponents.tsx":"11","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/HomePage.tsx":"12","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsPage.tsx":"13","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/WalletWordsPage.tsx":"14","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsIntroPage.tsx":"15","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CreateAccountPage.tsx":"16","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/WalletPage.tsx":"17"},{"size":1230,"mtime":1619191236978,"results":"18","hashOfConfig":"19"},{"size":5767,"mtime":1619191236983,"results":"20","hashOfConfig":"19"},{"size":2090,"mtime":1619195364998,"results":"21","hashOfConfig":"19"},{"size":610,"mtime":1619191236986,"results":"22","hashOfConfig":"19"},{"size":463,"mtime":1619192034511,"results":"23","hashOfConfig":"19"},{"size":1148,"mtime":1619191236972,"results":"24","hashOfConfig":"19"},{"size":6883,"mtime":1619192929212,"results":"25","hashOfConfig":"19"},{"size":2032,"mtime":1619191236971,"results":"26","hashOfConfig":"19"},{"size":582,"mtime":1619191236974,"results":"27","hashOfConfig":"19"},{"size":2671,"mtime":1619195333044,"results":"28","hashOfConfig":"19"},{"size":2418,"mtime":1619191236973,"results":"29","hashOfConfig":"19"},{"size":6952,"mtime":1619195430942,"results":"30","hashOfConfig":"19"},{"size":8115,"mtime":1619195332956,"results":"31","hashOfConfig":"19"},{"size":2004,"mtime":1619195332956,"results":"32","hashOfConfig":"19"},{"size":2414,"mtime":1619195332965,"results":"33","hashOfConfig":"19"},{"size":3991,"mtime":1619195332965,"results":"34","hashOfConfig":"19"},{"size":813,"mtime":1619195819355,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"16bwc0h",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/index.tsx",[],[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/serviceWorker.js",[],[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/App.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/globalStyles.ts",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/themes.ts",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/InfoBox.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Inputs.tsx",["74"],"import { AnimatePresence, HTMLMotionProps, motion, Variants } from 'framer-motion'\nimport styled from 'styled-components'\nimport tinycolor from 'tinycolor2'\nimport classNames from 'classnames'\nimport { useState, ChangeEvent, useRef, useEffect } from 'react'\nimport { FiCheck, FiChevronDown } from 'react-icons/fi'\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  error?: string\n  isValid?: boolean\n  disabled?: boolean\n}\n\nconst variants: Variants = {\n  hidden: { y: 10, opacity: 0 },\n  shown: (disabled) => ({ y: 0, opacity: disabled ? 0.5 : 1 }),\n  disabled: { y: 0, opacity: 0.5 }\n}\n\nconst placeHolderVariants: Variants = {\n  up: { y: -35, scale: 0.8 },\n  down: { y: 0, scale: 1 }\n}\n\nexport const Input = ({\n  placeholder,\n  error,\n  isValid,\n  disabled,\n  onChange,\n  value: initialValue,\n  ...props\n}: InputProps) => {\n  const [canBeAnimated, setCanBeAnimated] = useState(false)\n  const [value, setValue] = useState(initialValue)\n\n  const className = classNames({\n    error,\n    isValid\n  })\n\n  const handleValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    onChange && onChange(e)\n    setValue(e.target.value)\n  }\n\n  return (\n    <InputContainer\n      variants={variants}\n      animate={canBeAnimated ? (!disabled ? 'shown' : 'disabled') : false}\n      onAnimationComplete={() => setCanBeAnimated(true)}\n      custom={disabled}\n    >\n      <Label variants={placeHolderVariants} animate={!value ? 'down' : 'up'}>\n        {placeholder}\n      </Label>\n      <StyledInput {...props} value={value} onChange={handleValueChange} className={className} disabled={disabled} />\n      {!disabled && isValid && (\n        <ValidIconContainer initial={{ y: 10, opacity: 0 }} animate={{ y: 0, opacity: 1 }}>\n          <FiCheck strokeWidth={3} />\n        </ValidIconContainer>\n      )}\n      {!disabled && error && <ErrorMessage animate={{ y: 10, opacity: 1 }}>{error}</ErrorMessage>}\n    </InputContainer>\n  )\n}\n\n// === SELECT === //\n\ninterface SelectOption {\n  value: string\n  label: string\n}\n\ninterface SelectProps extends HTMLMotionProps<'select'> {\n  initialValue?: SelectOption\n  options: SelectOption[]\n  onValueChange: (value: SelectOption | undefined) => void\n}\n\nexport const Select = ({ options, placeholder, disabled, initialValue, className, onValueChange }: SelectProps) => {\n  const [canBeAnimated, setCanBeAnimated] = useState(false)\n  const [value, setValue] = useState(initialValue)\n  const [showPopup, setShowPopup] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // If only one value, select it\n  if (!value && options.length === 1) {\n    setValue(options[0])\n  }\n\n  useEffect(() => {\n    // Set value in input\n    if (inputRef.current && value) {\n      inputRef.current.value = value.label\n      onValueChange(value)\n    }\n  }, [value])\n\n  return (\n    <>\n      <InputContainer\n        variants={variants}\n        animate={canBeAnimated ? (!disabled ? 'shown' : 'disabled') : false}\n        onAnimationComplete={() => setCanBeAnimated(true)}\n        custom={disabled}\n        onClick={() => setShowPopup(true)}\n      >\n        <Label variants={placeHolderVariants} animate={!value ? 'down' : 'up'}>\n          {placeholder}\n        </Label>\n        <Chevron>\n          <FiChevronDown />\n        </Chevron>\n        <StyledInput type=\"button\" className={className} ref={inputRef} disabled={disabled} />\n      </InputContainer>\n      <AnimatePresence>\n        {showPopup && (\n          <SelectOptionsPopup\n            options={options}\n            setValue={setValue}\n            handleBackgroundClick={() => {\n              setShowPopup(false)\n            }}\n          />\n        )}\n      </AnimatePresence>\n    </>\n  )\n}\n\nconst SelectOptionsPopup = ({\n  options,\n  setValue,\n  handleBackgroundClick\n}: {\n  options: SelectOption[]\n  setValue: React.Dispatch<React.SetStateAction<{ value: string; label: string } | undefined>>\n  handleBackgroundClick: () => void\n}) => {\n  const handleOptionSelect = (value: SelectOption) => {\n    setValue(value)\n    handleBackgroundClick()\n  }\n\n  return (\n    <PopupContainer\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 10 }}\n      onClick={() => {\n        handleBackgroundClick()\n      }}\n    >\n      <Popup\n        onClick={(e) => {\n          e.stopPropagation()\n        }}\n      >\n        {options.map((o) => (\n          <OptionItem key={o.value} onClick={() => handleOptionSelect(o)}>\n            {o.label}\n          </OptionItem>\n        ))}\n      </Popup>\n    </PopupContainer>\n  )\n}\n\n// === Styling\n\nconst InputContainer = styled(motion.div)`\n  position: relative;\n  height: 50px;\n  width: 100%;\n  margin: 17px 0;\n`\n\nconst Label = styled(motion.label)`\n  position: absolute;\n  top: 15px;\n  left: 18px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.font.secondary};\n`\n\nconst ErrorMessage = styled(motion.label)<InputProps>`\n  position: absolute;\n  bottom: -10px;\n  right: 10px;\n  font-weight: 600;\n  opacity: 0;\n  font-size: 0.8rem;\n  color: ${({ theme }) => theme.global.alert};\n`\n\nconst ValidIconContainer = styled(motion.div)`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 20px;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.global.valid};\n`\n\nconst StyledInput = styled.input<InputProps>`\n  background-image: none;\n  height: 50px;\n  width: 100%;\n  border-radius: 100px;\n  background-color: ${({ theme }) => theme.bg.secondary};\n  border: 3px solid ${({ theme }) => theme.border.primary};\n  padding: 0 15px;\n  font-weight: 600;\n  font-size: 1em;\n  text-align: left;\n\n  transition: 0.2s ease-out;\n\n  &:focus {\n    background-color: ${({ theme }) => theme.bg.primary};\n    border: 3px solid ${({ theme }) => theme.global.accent};\n  }\n\n  &.error {\n    border: 3px solid ${({ theme }) => theme.global.alert};\n    background-color: ${({ theme }) => tinycolor(theme.global.alert).setAlpha(0.1).toString()};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.bg.secondary};\n    border: 3px solid ${({ theme }) => theme.border.primary};\n  }\n`\n\nconst Chevron = styled.div`\n  position: absolute;\n  font-size: 1.3rem;\n  top: 16px;\n  right: 18px;\n  color: ${({ theme }) => theme.font.secondary};\n`\n\nconst PopupContainer = styled(motion.div)`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n`\n\nconst Popup = styled.div`\n  background-color: ${({ theme }) => theme.bg.primary};\n  border-radius: 14px;\n  margin: auto;\n  width: 30vw;\n  min-width: 300px;\n  max-height: 500px;\n  overflow-x: hidden;\n  overflow-y: auto;\n`\n\nconst OptionItem = styled.div`\n  padding: 15px;\n  cursor: pointer;\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${({ theme }) => theme.border.primary};\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.bg.secondary};\n  }\n`\n","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Buttons.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Paragraph.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/index.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/PageComponents.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/HomePage.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsPage.tsx",["75"],"import React, { useContext, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { CreateWalletContext } from '.'\nimport { Button } from '../../components/Buttons'\nimport { FooterActions, PageContainer, PageTitle, SectionContent } from '../../components/PageComponents'\nimport tinycolor from 'tinycolor2'\nimport Paragraph from '../../components/Paragraph'\nimport { motion, PanInfo } from 'framer-motion'\nimport { throttle } from 'lodash'\nimport { Storage } from 'alf-client'\nimport { GlobalContext } from '../../App'\nimport { useHistory } from 'react-router'\n\nconst getShuffledArr = (arr: string[]) => {\n  const newArr = arr.slice()\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const rand = Math.floor(Math.random() * (i + 1))\n    ;[newArr[i], newArr[rand]] = [newArr[rand], newArr[i]]\n  }\n  return newArr\n}\n\nconst CheckWordsPage = () => {\n  const history = useHistory()\n  const { mnemonic, plainWallet, password, username, onButtonBack } = useContext(CreateWalletContext)\n  const { setWallet } = useContext(GlobalContext)\n  const splitMnemonic = mnemonic.split(' ')\n\n  const wordList = useRef(getShuffledArr(splitMnemonic))\n\n  const [selectedWords, setSelectedWords] = useState<string[]>([])\n  const selectedElements = useRef<{ [word: string]: Element | null }>(\n    splitMnemonic.reduce((p, c) => ({ ...p, [c]: null }), {})\n  )\n\n  // === Drag interaction ===\n  const [isDragging, setIsDragging] = useState(false)\n  const [closestWord, setClosestWord] = useState('')\n\n  // === Actions ===\n  // ===============\n  const handleSelectedWordRemove = (w: string) => {\n    if (isDragging) {\n      setIsDragging(false)\n      return\n    }\n    setSelectedWords(selectedWords.filter((word) => w !== word))\n\n    // Remove from element list\n    selectedElements.current[w] = null\n  }\n\n  const handleSelectedWordDrag = throttle(\n    (\n      event: MouseEvent | TouchEvent | PointerEvent,\n      info: PanInfo,\n      word: string,\n      currentSelectedElements: typeof selectedElements.current\n    ) => {\n      //if (Math.abs(info.offset.x) < 5 || Math.abs(info.offset.y) < 2) return\n\n      const { [word]: _currentElement, ...otherElements } = currentSelectedElements\n      const closestElement = Object.values(otherElements).reduce(\n        (p, c, i) => {\n          // Distance\n          let returnedObject\n\n          if (c) {\n            const rect = c.getBoundingClientRect()\n            const distance = Math.hypot(rect.x - info.point.x, rect.y - info.point.y)\n\n            if (p.distance === 0) {\n              returnedObject = {\n                word: Object.keys(otherElements)[i],\n                element: c,\n                distance: distance\n              }\n            } else if (distance < p.distance) {\n              returnedObject = {\n                word: Object.keys(otherElements)[i],\n                element: c,\n                distance: distance\n              }\n            } else {\n              returnedObject = p\n            }\n          } else {\n            returnedObject = p\n          }\n\n          return returnedObject\n        },\n        {\n          word: '',\n          element: null as Element | null,\n          distance: 0\n        }\n      )\n\n      setClosestWord(closestElement.word)\n    },\n    300\n  )\n\n  const handleSelectedWordDragEnd = (word: string, newNeighbourWord: string) => {\n    // Find neighbour index\n    if (closestWord) {\n      const currentIndex = selectedWords.findIndex((w) => w === word)\n      let newIndex = selectedWords.findIndex((w) => w === newNeighbourWord)\n      if (currentIndex < newIndex) {\n        newIndex -= 1\n      }\n\n      const filteredWords = selectedWords.filter((w) => w !== word)\n      setSelectedWords([...filteredWords.slice(0, newIndex), word, ...filteredWords.slice(newIndex)])\n      setClosestWord('')\n    }\n  }\n\n  // === Renders\n\n  const renderRemainingWords = () => {\n    return wordList.current\n      .filter((w) => !selectedWords?.includes(w))\n      .map((w) => (\n        <RemainingWord onClick={() => setSelectedWords([...selectedWords, w])} key={w} layoutId={w}>\n          {w}\n        </RemainingWord>\n      ))\n  }\n\n  const renderSelectedWords = () => {\n    return selectedWords?.map((w) => (\n      <SelectedWord\n        onPointerUp={() => handleSelectedWordRemove(w)}\n        key={w}\n        layoutId={w}\n        drag\n        ref={(element) => {\n          if (selectedElements.current && element) selectedElements.current[w] = element\n        }}\n        onDragStart={() => setIsDragging(true)}\n        onDrag={(e, info) => handleSelectedWordDrag(e, info, w, selectedElements.current)}\n        onDragEnd={() => handleSelectedWordDragEnd(w, closestWord)}\n      >\n        {isDragging && closestWord === w && <DragCursor layoutId=\"cursor\" />}\n        {w}\n      </SelectedWord>\n    ))\n  }\n\n  const areWordsValid = () => {\n    return selectedWords.toString() == splitMnemonic.toString()\n  }\n\n  const createEncryptedWallet = async () => {\n    if (areWordsValid() && plainWallet) {\n      const walletEncrypted = await plainWallet.encrypt(password)\n      Storage().save(username, walletEncrypted)\n      setWallet(plainWallet)\n      return true\n    }\n  }\n\n  const handleButtonNext = () => {\n    const success = createEncryptedWallet()\n    if (success) history.push('/wallet')\n    else {\n      console.error('Something went wrong when creating encrypted wallet!')\n    }\n  }\n\n  return (\n    <PageContainer>\n      <PageTitle color=\"primary\" onBackButtonPress={onButtonBack}>\n        Security Check\n      </PageTitle>\n      <SectionContent>\n        <Paragraph style={{ width: '100%' }}>Select the words in the right order.</Paragraph>\n        <SelectedWordList\n          className={selectedWords.length === wordList.current.length ? (areWordsValid() ? 'valid' : 'error') : ''}\n        >\n          {renderSelectedWords()}\n        </SelectedWordList>\n        <RemainingWordList>{renderRemainingWords()}</RemainingWordList>\n      </SectionContent>\n      {selectedWords.length === wordList.current.length && (\n        <FooterActions>\n          <Button secondary onClick={onButtonBack}>\n            Cancel\n          </Button>\n          <Button onClick={handleButtonNext} disabled={!areWordsValid()}>\n            Continue\n          </Button>\n        </FooterActions>\n      )}\n    </PageContainer>\n  )\n}\n\nconst RemainingWordList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px 0;\n  flex: 1;\n  align-items: flex-start;\n  justify-content: flex-start;\n  align-content: flex-start;\n`\n\nconst SelectedWord = styled(motion.div)`\n  padding: 6px 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.global.accent};\n  color: ${({ theme }) => theme.font.contrast};\n  font-weight: 600;\n  text-align: center;\n  margin-bottom: 10px;\n  position: relative;\n  cursor: pointer;\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.8).toString()};\n  }\n`\n\nconst DragCursor = styled(motion.div)`\n  position: absolute;\n  left: -7px;\n  top: 0;\n  bottom: 0;\n  width: 4px;\n  background-color: ${({ theme }) => theme.global.accent};\n  z-index: 100;\n`\n\nconst SelectedWordList = styled.div`\n  width: 100%;\n  padding: 20px;\n  min-height: 30vh;\n  border-radius: 14px;\n  border: 3px solid ${({ theme }) => theme.border.primary};\n  background-color: ${({ theme }) => theme.bg.secondary};\n  margin-bottom: 20px;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: flex-start;\n  align-content: flex-start;\n\n  &.valid {\n    ${SelectedWord} {\n      background-color: ${({ theme }) => theme.global.valid};\n    }\n  }\n\n  &.error {\n    ${SelectedWord} {\n      background-color: ${({ theme }) => theme.global.alert};\n    }\n  }\n`\n\nconst RemainingWord = styled(SelectedWord)`\n  background-color: ${({ theme }) => theme.global.accent};\n  background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.2).toString()};\n  color: ${({ theme }) => theme.global.accent};\n\n  &:hover {\n    background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.3).toString()};\n  }\n`\n\nexport default CheckWordsPage\n","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/WalletWordsPage.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsIntroPage.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CreateAccountPage.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/WalletPage.tsx",["76"],{"ruleId":"77","severity":1,"message":"78","line":98,"column":6,"nodeType":"79","endLine":98,"endColumn":13,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":23,"nodeType":"83","messageId":"84","endLine":62,"endColumn":38},{"ruleId":"81","severity":1,"message":"85","line":11,"column":11,"nodeType":"83","messageId":"84","endLine":11,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onValueChange'. Either include it or remove the dependency array. If 'onValueChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["86"],"@typescript-eslint/no-unused-vars","'_currentElement' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.",{"desc":"87","fix":"88"},"Update the dependencies array to be: [onValueChange, value]",{"range":"89","text":"90"},[2801,2808],"[onValueChange, value]"]