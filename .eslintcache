[{"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/index.tsx":"1","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/serviceWorker.js":"2","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/App.tsx":"3","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/globalStyles.ts":"4","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/themes.ts":"5","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/Home.tsx":"6","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/InfoBox.tsx":"7","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Inputs.tsx":"8","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Buttons.tsx":"9","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Paragraph.tsx":"10","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CreateAccount.tsx":"11","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/index.tsx":"12","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/WalletWords.tsx":"13","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/PageComponents.tsx":"14","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsIntro.tsx":"15","/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWords.tsx":"16"},{"size":1230,"mtime":1618581457266,"results":"17","hashOfConfig":"18"},{"size":5767,"mtime":1618581457268,"results":"19","hashOfConfig":"18"},{"size":1933,"mtime":1619180039340,"results":"20","hashOfConfig":"18"},{"size":610,"mtime":1619074969384,"results":"21","hashOfConfig":"18"},{"size":464,"mtime":1618581457272,"results":"22","hashOfConfig":"18"},{"size":6807,"mtime":1619183032348,"results":"23","hashOfConfig":"18"},{"size":1148,"mtime":1618584998100,"results":"24","hashOfConfig":"18"},{"size":6787,"mtime":1619183045736,"results":"25","hashOfConfig":"18"},{"size":2032,"mtime":1618581457261,"results":"26","hashOfConfig":"18"},{"size":582,"mtime":1619163641533,"results":"27","hashOfConfig":"18"},{"size":3983,"mtime":1619162089885,"results":"28","hashOfConfig":"18"},{"size":2623,"mtime":1619179528925,"results":"29","hashOfConfig":"18"},{"size":1397,"mtime":1619083018878,"results":"30","hashOfConfig":"18"},{"size":2418,"mtime":1619164143065,"results":"31","hashOfConfig":"18"},{"size":2406,"mtime":1619083004949,"results":"32","hashOfConfig":"18"},{"size":8039,"mtime":1619161001261,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"16bwc0h",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/index.tsx",[],[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/serviceWorker.js",[],[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/App.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/globalStyles.ts",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/style/themes.ts",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/Home.tsx",["69"],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/InfoBox.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Inputs.tsx",["70"],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Buttons.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/Paragraph.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CreateAccount.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/index.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/WalletWords.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/components/PageComponents.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWordsIntro.tsx",[],"/Users/mika/Documents/Projects/Alephium/alephium-wallet/src/pages/CreateWallet/CheckWords.tsx",["71"],"import React, { useContext, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { CreateWalletContext } from '.'\nimport { Button } from '../../components/Buttons'\nimport { FooterActions, PageContainer, PageTitle, SectionContent } from '../../components/PageComponents'\nimport tinycolor from 'tinycolor2'\nimport Paragraph from '../../components/Paragraph'\nimport { motion, PanInfo } from 'framer-motion'\nimport { throttle } from 'lodash'\nimport { Storage } from 'alf-client'\nimport { GlobalContext } from '../../App'\n\nconst getShuffledArr = (arr: string[]) => {\n  const newArr = arr.slice()\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const rand = Math.floor(Math.random() * (i + 1))\n    ;[newArr[i], newArr[rand]] = [newArr[rand], newArr[i]]\n  }\n  return newArr\n}\n\nconst CheckWords = () => {\n  const { mnemonic, plainWallet, password, username, onButtonBack, onButtonNext } = useContext(CreateWalletContext)\n  const { setWallet } = useContext(GlobalContext)\n  const splitMnemonic = mnemonic.split(' ')\n\n  const wordList = useRef(getShuffledArr(splitMnemonic))\n\n  const [selectedWords, setSelectedWords] = useState<string[]>([])\n  const selectedElements = useRef<{ [word: string]: Element | null }>(\n    splitMnemonic.reduce((p, c) => ({ ...p, [c]: null }), {})\n  )\n\n  // === Drag interaction ===\n  const [isDragging, setIsDragging] = useState(false)\n  const [closestWord, setClosestWord] = useState('')\n\n  // === Actions ===\n  // ===============\n  const handleSelectedWordRemove = (w: string) => {\n    if (isDragging) {\n      setIsDragging(false)\n      return\n    }\n    setSelectedWords(selectedWords.filter((word) => w !== word))\n\n    // Remove from element list\n    selectedElements.current[w] = null\n  }\n\n  const handleSelectedWordDrag = throttle(\n    (\n      event: MouseEvent | TouchEvent | PointerEvent,\n      info: PanInfo,\n      word: string,\n      currentSelectedElements: typeof selectedElements.current\n    ) => {\n      //if (Math.abs(info.offset.x) < 5 || Math.abs(info.offset.y) < 2) return\n\n      const { [word]: _currentElement, ...otherElements } = currentSelectedElements\n      const closestElement = Object.values(otherElements).reduce(\n        (p, c, i) => {\n          // Distance\n          let returnedObject\n\n          if (c) {\n            const rect = c.getBoundingClientRect()\n            const distance = Math.hypot(rect.x - info.point.x, rect.y - info.point.y)\n\n            if (p.distance === 0) {\n              returnedObject = {\n                word: Object.keys(otherElements)[i],\n                element: c,\n                distance: distance\n              }\n            } else if (distance < p.distance) {\n              returnedObject = {\n                word: Object.keys(otherElements)[i],\n                element: c,\n                distance: distance\n              }\n            } else {\n              returnedObject = p\n            }\n          } else {\n            returnedObject = p\n          }\n\n          return returnedObject\n        },\n        {\n          word: '',\n          element: null as Element | null,\n          distance: 0\n        }\n      )\n\n      setClosestWord(closestElement.word)\n    },\n    300\n  )\n\n  const handleSelectedWordDragEnd = (word: string, newNeighbourWord: string) => {\n    // Find neighbour index\n    if (closestWord) {\n      const currentIndex = selectedWords.findIndex((w) => w === word)\n      let newIndex = selectedWords.findIndex((w) => w === newNeighbourWord)\n      if (currentIndex < newIndex) {\n        newIndex -= 1\n      }\n\n      const filteredWords = selectedWords.filter((w) => w !== word)\n      setSelectedWords([...filteredWords.slice(0, newIndex), word, ...filteredWords.slice(newIndex)])\n      setClosestWord('')\n    }\n  }\n\n  // === Renders\n\n  const renderRemainingWords = () => {\n    return wordList.current\n      .filter((w) => !selectedWords?.includes(w))\n      .map((w) => (\n        <RemainingWord onClick={() => setSelectedWords([...selectedWords, w])} key={w} layoutId={w}>\n          {w}\n        </RemainingWord>\n      ))\n  }\n\n  const renderSelectedWords = () => {\n    return selectedWords?.map((w) => (\n      <SelectedWord\n        onPointerUp={() => handleSelectedWordRemove(w)}\n        key={w}\n        layoutId={w}\n        drag\n        ref={(element) => {\n          if (selectedElements.current && element) selectedElements.current[w] = element\n        }}\n        onDragStart={() => setIsDragging(true)}\n        onDrag={(e, info) => handleSelectedWordDrag(e, info, w, selectedElements.current)}\n        onDragEnd={() => handleSelectedWordDragEnd(w, closestWord)}\n      >\n        {isDragging && closestWord === w && <DragCursor layoutId=\"cursor\" />}\n        {w}\n      </SelectedWord>\n    ))\n  }\n\n  const areWordsValid = () => {\n    return selectedWords.toString() == splitMnemonic.toString()\n  }\n\n  const createEncryptedWallet = async () => {\n    if (areWordsValid() && plainWallet) {\n      const walletEncrypted = await plainWallet.encrypt(password)\n      Storage().save(username, walletEncrypted)\n      setWallet(plainWallet)\n      return true\n    }\n  }\n\n  const handleButtonNext = () => {\n    const success = createEncryptedWallet()\n    if (success) onButtonNext()\n    else {\n      console.error('Something went wrong when creating encrypted wallet!')\n    }\n  }\n\n  return (\n    <PageContainer>\n      <PageTitle color=\"primary\" onBackButtonPress={onButtonBack}>\n        Security Check\n      </PageTitle>\n      <SectionContent>\n        <Paragraph style={{ width: '100%' }}>Select the words in the right order.</Paragraph>\n        <SelectedWordList\n          className={selectedWords.length === wordList.current.length ? (areWordsValid() ? 'valid' : 'error') : ''}\n        >\n          {renderSelectedWords()}\n        </SelectedWordList>\n        <RemainingWordList>{renderRemainingWords()}</RemainingWordList>\n      </SectionContent>\n      {selectedWords.length === wordList.current.length && (\n        <FooterActions>\n          <Button secondary onClick={onButtonBack}>\n            Cancel\n          </Button>\n          <Button onClick={handleButtonNext} disabled={!areWordsValid()}>\n            Continue\n          </Button>\n        </FooterActions>\n      )}\n    </PageContainer>\n  )\n}\n\nconst RemainingWordList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px 0;\n  flex: 1;\n  align-items: flex-start;\n  justify-content: flex-start;\n  align-content: flex-start;\n`\n\nconst SelectedWord = styled(motion.div)`\n  padding: 6px 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.global.accent};\n  color: ${({ theme }) => theme.font.contrast};\n  font-weight: 600;\n  text-align: center;\n  margin-bottom: 10px;\n  position: relative;\n  cursor: pointer;\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.8).toString()};\n  }\n`\n\nconst DragCursor = styled(motion.div)`\n  position: absolute;\n  left: -7px;\n  top: 0;\n  bottom: 0;\n  width: 4px;\n  background-color: ${({ theme }) => theme.global.accent};\n  z-index: 100;\n`\n\nconst SelectedWordList = styled.div`\n  width: 100%;\n  padding: 20px;\n  min-height: 30vh;\n  border-radius: 14px;\n  border: 3px solid ${({ theme }) => theme.border.primary};\n  background-color: ${({ theme }) => theme.bg.secondary};\n  margin-bottom: 20px;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: flex-start;\n  align-content: flex-start;\n\n  &.valid {\n    ${SelectedWord} {\n      background-color: ${({ theme }) => theme.global.valid};\n    }\n  }\n\n  &.error {\n    ${SelectedWord} {\n      background-color: ${({ theme }) => theme.global.alert};\n    }\n  }\n`\n\nconst RemainingWord = styled(SelectedWord)`\n  background-color: ${({ theme }) => theme.global.accent};\n  background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.2).toString()};\n  color: ${({ theme }) => theme.global.accent};\n\n  &:hover {\n    background-color: ${({ theme }) => tinycolor(theme.global.accent).setAlpha(0.3).toString()};\n  }\n`\n\nexport default CheckWords\n",{"ruleId":"72","severity":1,"message":"73","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":98,"column":6,"nodeType":"78","endLine":98,"endColumn":13,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":60,"column":23,"nodeType":"74","messageId":"75","endLine":60,"endColumn":38},"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onValueChange'. Either include it or remove the dependency array. If 'onValueChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["81"],"'_currentElement' is assigned a value but never used.",{"desc":"82","fix":"83"},"Update the dependencies array to be: [onValueChange, value]",{"range":"84","text":"85"},[2801,2808],"[onValueChange, value]"]